<?php
/**
 * @file
 * Holds mainly hook implementations for the islandora_restricted module.
 */

define('ISLANDORA_RESTRICTED_APPLY_RESTRICTIONS', 'apply islandora restrictions');
define('ISLANDORA_RESTRICTED_CAN_SEE_RESTRICTED_RELATIONSHIP', 'canSeeRestricted');
define('ISLANDORA_RESTRICTED_CAN_SEE_HIDDEN_RELATIONSHIP', 'canSeeHidden');
define('ISLANDORA_RESTRICTED_OBJECT_STATE_RELATIONSHIP', 'restrictedState');

/**
 * Implements hook_menu().
 */
function islandora_restricted_menu() {
  $items = array();
  $items['admin/islandora/islandora-restricted'] = array(
    'title' => 'Islandora Restricted',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_restricted_admin_form'),
    'access arguments' => array('administer islandora_restricted'),
    'file' => 'includes/admin.form.inc',
  );
  $items['islandora/object/%islandora_object/manage/restricted'] = array(
    'title' => 'Simple Restrictions',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_restricted_manage_form', 2),
    'access callback' => 'islandora_restricted_access',
    'access arguments' => array(2),
    'file' => 'includes/restrict.form.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function islandora_restricted_permission() {
  return array(
    'administer islandora_restricted' => array(
      'title' => t('Administer the Islandora Restricted module.'),
    ),
    ISLANDORA_RESTRICTED_APPLY_RESTRICTIONS => array(
      'title' => t('Apply simple security restrictions to Islandora objects, ignore restrictions.'),
    ),
  );
}

/**
 * Access callback to display the Simple Restrictions tab.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing an object within Fedora.
 *
 * @return bool
 *   TRUE if the user has access, FALSE otherwise.
 */
function islandora_restricted_access(AbstractObject $object) {
  return islandora_object_access(ISLANDORA_RESTRICTED_APPLY_RESTRICTIONS, $object);
}

/**
 * Implements hook_islandora_datastream_access().
 */
function islandora_restricted_islandora_datastream_access($op, $object, $user) {
  module_load_include('inc', 'islandora_restricted', 'includes/utilities');
  if (!islandora_restricted_user_has_access($object->parent, $user)) {
    return FALSE;
  }
}

/**
 * Implements hook_islandora_object_access().
 */
function islandora_restricted_islandora_object_access($op, $object, $user) {
  module_load_include('inc', 'islandora_restricted', 'includes/utilities');
  if (islandora_restricted_user_has_access($object, $user)) {
    return TRUE;
  }
  watchdog('islandora_restricted', 'Denied access to @pid for user @u to do (@op)', array('@u' => $user->uid, '@pid' => $object->id, '@op' => $op), WATCHDOG_DEBUG);
  if (islandora_restricted_is_frontend_op($op)) {
    if (strpos(current_path(), "islandora/object/{$object->id}") !== FALSE) {
      if (! user_is_logged_in() && strlen(variable_get('islandora_restricted_redirect_login', '')) > 0) {
        // User is not logged in and we are redirecting to a login page/block
        drupal_goto(variable_get('islandora_restricted_redirect_login', ''), array('query'=>array('destination'=>current_path())));
      } else {
        drupal_goto(variable_get('islandora_restricted_acces_denied_redirect', ''));
      }
    }
  }
  return FALSE;
}

/**
 * Is the operation a front-end process.
 *
 * @param String $op
 *   the operation.
 *
 * @return boolean
 *   whether the operation is a front-end (user-facing) process.
 */
function islandora_restricted_is_frontend_op($op) {
  $front_end_ops = array(
    ISLANDORA_VIEW_OBJECTS,
    ISLANDORA_METADATA_EDIT,
    ISLANDORA_ADD_DS,
    ISLANDORA_INGEST,
    ISLANDORA_PURGE,
    ISLANDORA_MANAGE_PROPERTIES,
    ISLANDORA_VIEW_DATASTREAM_HISTORY,
    ISLANDORA_MANAGE_DELETED_OBJECTS,
    ISLANDORA_REVERT_DATASTREAM,
    ISLANDORA_REGENERATE_DERIVATIVES,
    ISLANDORA_REPLACE_DATASTREAM_CONTENT,
  );
  return in_array($op, $front_end_ops);
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_restricted_islandora_ingest_steps(array $form_state) {
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  if (empty($shared_storage['parent'])) {
    return;
  }
  $parent = $shared_storage['parent'];
  return array(
    'islandora_restricted_ingest' => array(
      'type' => 'callback',
      'weight' => 8,
      'module' => 'islandora_restricted',
      'do_function' => array(
        'function' => 'islandora_restricted_apply_policy',
        'args' => array($parent),
      ),
      'undo_function' => array(
        'function' => 'islandora_restricted_undo_policy',
        'args' => array(),
      ),
    ),
  );
}

/**
 * Applies the parent's permissions to the child if it exists.
 *
 * @param array $form_state
 *   The passed through form_state from hook_islandora_ingest_steps().
 * @param string $parent
 *   PID of the parent object.
 */
function islandora_restricted_apply_policy(&$form_state, $parent = NULL) {
  module_load_include('inc', 'islandora_restricted', 'includes/utilities');
  global $user;

  if (isset($parent)) {
    $parent_object = islandora_object_load($parent);

    $ingesting_restrictions = islandora_restricted_retrieve_restrictions($parent_object);
    if (isset($ingesting_restrictions['state'])) {
      $user_uri = islandora_restricted_create_uri_link($user->uid, 'user');
      if (!in_array($user_uri, $ingesting_restrictions['restricted']['users'])) {
        $ingesting_restrictions['restricted']['users'][] = $user_uri;
      }
      $objects = &islandora_ingest_form_get_objects($form_state);
      foreach ($objects as $object) {
        islandora_restricted_add_relationships($object, $ingesting_restrictions);
      }
    }
  }
}

/**
 * Removes any islandora_restricted permissions from the objects
 *
 * @param array $form_state
 *   The passed through form_state from hook_islandora_ingest_steps().
 */
function islandora_restricted_undo_policy(&$form_state) {
  $objects = &islandora_ingest_form_get_objects($form_state);
  foreach ($objects as $object) {
    islandora_restricted_remove_state_relationship($object);
  }
}

/**
 * Implements hook_islandora_basic_collection_get_query_statements().
 */
function islandora_restricted_islandora_basic_collection_get_query_statements($type = 'view') {
  $islandora_prefix = ISLANDORA_RELS_EXT_URI;
  $state_rels = ISLANDORA_RESTRICTED_OBJECT_STATE_RELATIONSHIP;
  $hidden_rels = ISLANDORA_RESTRICTED_CAN_SEE_HIDDEN_RELATIONSHIP;
  // Only filter if the user doesn't have the permission.
  if (!user_access(ISLANDORA_RESTRICTED_APPLY_RESTRICTIONS)) {
    // Get the state so we can figure out what restrictions we need to apply.
    return <<<EOQ
    OPTIONAL
    {
      ?object <$islandora_prefix$state_rels> ?state .
      OPTIONAL
      {
        ?object <$islandora_prefix$hidden_rels> ?entity_uri
      }
    }
EOQ;
  }
}

/**
 * Implements hook_islandora_basic_collection_get_query_filters().
 */
function islandora_restricted_islandora_basic_collection_get_query_filters($type) {
  module_load_include('inc', 'islandora_restricted', 'includes/utilities');
  global $user;
  $user_uri = islandora_restricted_create_uri_link($user->uid, 'user');

  $role_matches = array();
  foreach ($user->roles as $rid => $role_name) {
    $role_uri = islandora_restricted_create_uri_link($rid, 'role');
    $role_matches[] = "?entity_uri=<{$role_uri}>";
  }
  $role_matcher = implode(' || ', $role_matches);
  // Only filter if the user doesn't have the permission.
  if (!user_access(ISLANDORA_RESTRICTED_APPLY_RESTRICTIONS)) {
    return "(!bound(?state) || ?state!='hidden') || (?state='hidden' && (?entity_uri=<{$user_uri}> || $role_matcher))";
  }
}

/**
 * Implements hook_preprocess_islandora_basic_collection_grid().
 */
function islandora_restricted_preprocess_islandora_basic_collection_grid(&$variables) {
  module_load_include('inc', 'islandora_restricted', 'includes/utilities');
  global $user;
  foreach ($variables['associated_objects_array'] as $pid => $object_array) {
    if (!islandora_restricted_user_has_access($object_array['object'], $user)) {
      $restricted_image = theme('image', array(
        'path' => drupal_get_path('module', 'islandora_restricted') . '/images/access_denied.png',
      ));
      $restricted_image_link = l($restricted_image, $object_array['path'], array(
        'html' => TRUE,
        'attributes' => array('title' => $object_array['title']),
      ));
      $variables['associated_objects_array'][$pid]['thumbnail'] = $restricted_image;
      $variables['associated_objects_array'][$pid]['thumb_link'] = $restricted_image_link;
      $variables['associated_objects_array'][$pid]['dc_array'] = array();
    }
  }
}

/**
 * Implements hook_preprocess_islandora_basic_collection().
 */
function islandora_restricted_preprocess_islandora_basic_collection(&$variables) {
  islandora_restricted_preprocess_islandora_basic_collection_grid($variables);
}

 /**
 * Implements hook_process_hook().
 *
 * Because we want to replace the TN for restricted objects to use our
 * access denied image.
 */
function islandora_restricted_process_islandora_objects_subset(&$variables) {
  module_load_include('inc', 'islandora', 'theme/theme');
  global $user;
  $module_path = drupal_get_path('module', 'islandora_restricted');
  $variables['content'] = array(
     '#attached' => array(
       'css' => array(drupal_get_path('module', 'islandora') . '/css/islandora.objects.css'),
     ),
     '#theme' => 'islandora_objects_grid',
  );
  $variables['content']['#objects'] = array();

  foreach ($variables['objects'] as $obj_id) {
    $temp_obj = islandora_objects_object_mapper($obj_id);
    $object = islandora_object_load($obj_id);
    if (!islandora_restricted_user_has_access($object, $user)) {
      $url = "islandora/object/{$obj_id}";
      $img = array(
        '#theme' => 'image',
        '#path' => "$module_path/images/access_denied.png",
        '#attributes' => array(),
      );
      $img = drupal_render($img);
      $link_options = array('html' => TRUE, 'attributes' => array('title' => $object->label));
      $temp_obj['thumb'] = l($img, $url, $link_options);
      $variables['content']['#objects'][] = $temp_obj;
    }
    else {
     $variables['content']['#objects'][] = $temp_obj;
    }
  }
  $variables['content'] = drupal_render($variables['content']);
}

/**
 * Hook to update Solr queries to respect islandora_restricted rules.
 *
 * @global user
 *   The current user.
 *
 * @param IslandoraSolrQueryProcessor $islandora_solr_query
 *   The Solr query processor to apply XACML rules to.
 */
function islandora_restricted_islandora_solr_query($islandora_solr_query) {
  module_load_include('inc', 'islandora_restricted', 'includes/utilities');
  module_load_include('inc', 'islandora_solr', 'includes/utilities');

  global $user;

  $user_uri = islandora_restricted_create_uri_link($user->uid, 'user');
  $fq = variable_get(
      'islandora_restricted_hidden_exclude_field',
      'RELS_EXT_canSeeHidden_uri_ms'
    ) .
    ':' .
    islandora_solr_lesser_escape($user_uri) .
    ' OR ';

  // Check if any of my roles are allowed.
  foreach ($user->roles as $rid => $role) {
    $role_uri = islandora_restricted_create_uri_link($rid, 'role');;
    $fq .= variable_get(
        'islandora_restricted_hidden_exclude_field',
        'RELS_EXT_canSeeHidden_uri_ms'
      ) .
      ':' .
      islandora_solr_lesser_escape($role_uri) .
      ' OR ';
  }
  // Check if the object is not hidden.
  $fq .= '(*:* -' .
    variable_get(
      'islandora_restricted_state_field',
      'RELS_EXT_restrictedState_literal_ms'
    ) .
    ':hidden)';
    
    watchdog('islandora_restricted', 'adding solr fq @fq', array('@fq' => $fq), WATCHDOG_DEBUG);

  $islandora_solr_query->solrParams['fq'][] = $fq;
}

/**
 * Implements hook_islandora_solr_results_alter().
 *
 * @global user
 *   The current user.
 */
function islandora_restricted_islandora_solr_object_result_alter(&$search_result, $query_processor) {
  module_load_include('inc', 'islandora_restricted', 'includes/utilities');
  $state_field = variable_get(
      'islandora_restricted_state_field',
      'RELS_EXT_restrictedState_literal_ms'
    );
  if (isset($search_result['solr_doc'][$state_field]) && $search_result['solr_doc'][$state_field][0] == 'restricted') {
    global $user;
    $restrict_field = variable_get(
      'islandora_restricted_restricted_exclude_field',
      'RELS_EXT_canSeeRestricted_uri_ms'
    );
    $user_uri = islandora_restricted_create_uri_link($user->uid, 'user');
    if (isset($search_result['solr_doc'][$restrict_field])) {
      if (in_array($user_uri, $search_result['solr_doc'][$restrict_field])) {
        return;
      }
      else {
        foreach ($user->roles as $rid => $role) {
          $role_uri = islandora_restricted_create_uri_link($rid, 'role');
          if (in_array($role_uri, $search_result['solr_doc'][$restrict_field])) {
            return;
          }
        }
      }
    }
    $search_result['thumbnail_url'] = drupal_get_path(
        'module',
        'islandora_restricted'
      ) .
      '/images/access_denied.png';
    foreach (array_keys($search_result['solr_doc']) as $key) {
      unset($search_result['solr_doc'][$key]);
    }
  }
}
